/** 
 * Generated by Creer at 03:01PM on November 10, 2015 UTC, git hash: '1b69e788060071d644dd7b8745dca107577844e1'
 * This is where you build your AI for the Anarchy game.
 */
package games.anarchy;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import joueur.BaseAI;
// <<-- Creer-Merge: imports -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
// you can add addtional import(s) here
// <<-- /Creer-Merge: imports -->>
@SuppressWarnings("unused")

/**
 * This is where you build your AI for the Anarchy game.
 */
public class AI extends BaseAI {
    /**
     * This is the Game object itself, it contains all the information about the current game
     */
    public Game game;

    /**
     * This is your AI's player. This AI class is not a player, but it should command this Player.
     */
    public Player player;

    // <<-- Creer-Merge: fields -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
    // you can add additional fields here for your AI to use
    // <<-- /Creer-Merge: fields -->>


    /**
     * This returns your AI's name to the game server. Just replace the string.
     * @return string of you AI's name
     */
    public String getName() {
        // <<-- Creer-Merge: get-name -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        return "Anarchy Java Player"; // REPLACE THIS WITH YOUR TEAM NAME!
        // <<-- /Creer-Merge: get-name -->>
    }

    /**
     * This is automatically called when the game first starts, once the Game object and all GameObjects have been initialized, but before any players do anything.
     * This is a good place to initialize any variables you add to your AI, or start tracking game objects.
     */
    public void start() {
        // <<-- Creer-Merge: start -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        super.start();
        // <<-- /Creer-Merge: start -->>
    }

    /**
     * This is automatically called every time the game (or anything in it) updates.
     * If a function you call triggers an update this will be called before that function returns.
     */
    public void gameUpdated() {
        // <<-- Creer-Merge: game-updated -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        super.gameUpdated();
        // <<-- /Creer-Merge: game-updated -->>
    }

    /**
     * This is automatically called when the game ends.
     * You can do any cleanup of you AI here, or do custom logging. After this function returns the application will close.
     * @param  won  true if your player won, false otherwise
     * @param  name  reason">a string explaining why you won or lost
     */
    public void ended(boolean won, String reason) {
        // <<-- Creer-Merge: ended -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        super.ended(won, reason);
        // <<-- /Creer-Merge: ended -->>
    }


    /**
     * This is called every time the AI is asked to respond with a command during their turn
     *
     * @return represents if you want to end your turn. true means end the turn, false means to keep your turn going and re-call runTurn()
     */
    public boolean runTurn() {
        // <<-- Creer-Merge: runTurn -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
        // Put your game logic here for runTurn

        //Grab a building of each type!
        Warehouse warehouse = player.warehouses.get(0);
        FireDepartment fireDept = player.fireDepartments.get(0);
        PoliceDepartment police = player.policeDepartments.get(0);
        //get two weather stations for intensifying and rotating the weather
        WeatherStation intensifier = player.weatherStations.get(0);
        WeatherStation rotater = player.weatherStations.get(1);

        //get the enemy
        Player enemy = player.otherPlayer;

        //Set an enemy building on fire
        if(canBeBribed(warehouse)) {
            //access a building the enemy (other player) has
            //make sure this building is not headquarters
            int i = 0;
            Building target;
            do target = enemy.warehouses.get(i++);
            while(target.isHeadquarters);

            //and set it on fire
            warehouse.ignite(target);
        }

        if(canBeBribed(fireDept)) {
            //pick a warehouse
            //make sure it is not headquarters
            int i = 0;
            Building target;
            do target = enemy.warehouses.get(i++);
            while(target.isHeadquarters);

            //douse it
            fireDept.extinguish(target);
        }

        if(canBeBribed(police)) {
            //pick an enemy warehouse and raid it
            Warehouse target = enemy.warehouses.get(0);
            police.raid(target);
        }

        if(canBeBribed(intensifier)) {

            if(game.nextForecast.intensity < game.maxForecastIntensity) {
                //only increase if intensity of weather is currently less than max
                intensifier.intensify();
            }
            else {
                //otherwise pass true to decrease
                intensifier.intensify(true);
            }
        }

        if(canBeBribed(rotater)) {
            //rotate weather clockwise (pass false to go counterclockwise)
            rotater.rotate();
        }

        return true;
        // <<-- /Creer-Merge: runTurn -->>
    }


    // <<-- Creer-Merge: methods -->> - Code you add between this comment and the end comment will be preserved between Creer re-runs.
    // you can add additional methods here for your AI to call

    //add your own methods to the ai!
    public boolean canBeBribed(Building building) {
        //make sure building has health
        if(building.health <= 0) 
            return false;

        //make sure building has not been bribed
        if(building.bribed) 
            return false;

        //make sure it is your own building
        if(building.owner != player) 
            return false;

        return true;
    }
    // <<-- /Creer-Merge: methods -->>
}
